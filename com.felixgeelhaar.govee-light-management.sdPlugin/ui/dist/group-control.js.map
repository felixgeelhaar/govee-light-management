{"version":3,"file":"group-control.js","sources":["../../../src/frontend/machines/groupManagementMachine.ts","../../../src/frontend/composables/useGroupManagement.ts","../../../src/frontend/views/GroupControlView.vue","../../../src/frontend/group-control.ts"],"sourcesContent":["import { setup, assign, fromPromise } from \"xstate\";\nimport type { LightGroup, LightItem } from \"@shared/types\";\nimport { websocketService } from \"../services/websocketService\";\n\n/**\n * Context for the group management state machine\n */\nexport interface GroupManagementContext {\n  groups: LightGroup[];\n  currentGroup: LightGroup | null;\n  availableLights: LightItem[];\n  selectedLights: string[];\n  error: string | null;\n  isLoading: boolean;\n}\n\n/**\n * Input for the group management machine\n */\nexport interface GroupManagementInput {\n  shouldFailSave?: boolean;\n  shouldFailDelete?: boolean;\n  shouldFailLoad?: boolean;\n}\n\n/**\n * Events that can be sent to the group management machine\n */\nexport type GroupManagementEvent =\n  | { type: \"LOAD_GROUPS\" }\n  | { type: \"CREATE_GROUP\" }\n  | { type: \"EDIT_GROUP\"; group: LightGroup }\n  | { type: \"SAVE_GROUP\"; name: string; selectedLights: string[] }\n  | { type: \"DELETE_GROUP\"; groupId: string }\n  | { type: \"CANCEL_EDIT\" }\n  | { type: \"GROUPS_LOADED\"; groups: LightGroup[] }\n  | { type: \"GROUP_SAVED\"; group: LightGroup }\n  | { type: \"GROUP_DELETED\"; groupId: string }\n  | { type: \"OPERATION_FAILED\"; error: string }\n  | { type: \"SELECT_LIGHT\"; lightId: string }\n  | { type: \"DESELECT_LIGHT\"; lightId: string };\n\n/**\n * State machine for managing light groups\n *\n * States:\n * - idle: Initial state, groups not loaded\n * - loading: Loading groups from storage\n * - ready: Groups loaded, ready for operations\n * - editing: Creating or editing a group\n * - saving: Saving group changes\n * - deleting: Deleting a group\n * - error: Operation failed\n */\nexport const groupManagementMachine = setup({\n  types: {\n    context: {} as GroupManagementContext,\n    events: {} as GroupManagementEvent,\n    input: {} as GroupManagementInput,\n  },\n  actions: {\n    setGroups: assign({\n      groups: ({ event }) => {\n        if (event.type === \"GROUPS_LOADED\") {\n          return event.groups;\n        }\n        return [];\n      },\n    }),\n\n    setCurrentGroup: assign({\n      currentGroup: ({ event }) => {\n        if (event.type === \"EDIT_GROUP\") {\n          return event.group;\n        }\n        return null;\n      },\n    }),\n\n    clearCurrentGroup: assign({\n      currentGroup: null,\n      selectedLights: [],\n    }),\n\n    selectLight: assign({\n      selectedLights: ({ context, event }) => {\n        if (event.type === \"SELECT_LIGHT\") {\n          if (!context.selectedLights.includes(event.lightId)) {\n            return [...context.selectedLights, event.lightId];\n          }\n        }\n        return context.selectedLights;\n      },\n    }),\n\n    deselectLight: assign({\n      selectedLights: ({ context, event }) => {\n        if (event.type === \"DESELECT_LIGHT\") {\n          return context.selectedLights.filter((id) => id !== event.lightId);\n        }\n        return context.selectedLights;\n      },\n    }),\n\n    addOrUpdateGroup: assign({\n      groups: ({ context, event }) => {\n        if (event.type === \"GROUP_SAVED\") {\n          const existingIndex = context.groups.findIndex(\n            (g) => g.id === event.group.id,\n          );\n          if (existingIndex >= 0) {\n            // Update existing group\n            const newGroups = [...context.groups];\n            newGroups[existingIndex] = event.group;\n            return newGroups;\n          } else {\n            // Add new group\n            return [...context.groups, event.group];\n          }\n        }\n        return context.groups;\n      },\n    }),\n\n    removeGroup: assign({\n      groups: ({ context, event }) => {\n        if (event.type === \"GROUP_DELETED\") {\n          return context.groups.filter((g) => g.id !== event.groupId);\n        }\n        return context.groups;\n      },\n    }),\n\n    setError: assign({\n      error: ({ event }) => {\n        if (event.type === \"OPERATION_FAILED\") {\n          return event.error;\n        }\n        return null;\n      },\n    }),\n\n    clearError: assign({\n      error: null,\n    }),\n\n    startLoading: assign({\n      isLoading: true,\n    }),\n\n    stopLoading: assign({\n      isLoading: false,\n    }),\n  },\n\n  actors: {\n    loadGroups: fromPromise(\n      async ({ input }: { input: GroupManagementInput }) => {\n        // Production-ready WebSocket-based group loading\n        if (!websocketService.isConnected) {\n          throw new Error(\"WebSocket not connected to Stream Deck\");\n        }\n\n        return new Promise<LightGroup[]>((resolve, reject) => {\n          const timeout = setTimeout(() => {\n            websocketService.off(\"sendToPropertyInspector\", responseHandler);\n            reject(new Error(\"Group loading timeout\"));\n          }, 10000); // 10 second timeout\n\n          const responseHandler = (message: any) => {\n            if (message.payload?.event === \"groupsReceived\") {\n              clearTimeout(timeout);\n              websocketService.off(\"sendToPropertyInspector\", responseHandler);\n\n              if (message.payload.error) {\n                reject(new Error(message.payload.error));\n              } else {\n                resolve(message.payload.groups || []);\n              }\n            }\n          };\n\n          // Listen for response\n          websocketService.on(\"sendToPropertyInspector\", responseHandler);\n\n          // Send groups request\n          websocketService.requestGroups();\n        });\n      },\n    ),\n\n    saveGroup: fromPromise(\n      async ({\n        input,\n      }: {\n        input: GroupManagementInput & {\n          name: string;\n          selectedLights: string[];\n          groupId?: string;\n        };\n      }) => {\n        // Production-ready WebSocket-based group saving\n        if (!websocketService.isConnected) {\n          throw new Error(\"WebSocket not connected to Stream Deck\");\n        }\n\n        return new Promise<LightGroup>((resolve, reject) => {\n          const timeout = setTimeout(() => {\n            websocketService.off(\"sendToPropertyInspector\", responseHandler);\n            reject(new Error(\"Group save timeout\"));\n          }, 10000); // 10 second timeout\n\n          const responseHandler = (message: any) => {\n            if (message.payload?.event === \"groupSaved\") {\n              clearTimeout(timeout);\n              websocketService.off(\"sendToPropertyInspector\", responseHandler);\n\n              if (message.payload.error) {\n                reject(new Error(message.payload.error));\n              } else {\n                resolve(message.payload.group);\n              }\n            }\n          };\n\n          // Listen for response\n          websocketService.on(\"sendToPropertyInspector\", responseHandler);\n\n          // Send save request\n          websocketService.saveGroup({\n            name: input.name,\n            lightIds: input.selectedLights,\n          });\n        });\n      },\n    ),\n\n    deleteGroup: fromPromise(\n      async ({\n        input,\n      }: {\n        input: GroupManagementInput & { groupId: string };\n      }) => {\n        // Production-ready WebSocket-based group deletion\n        if (!websocketService.isConnected) {\n          throw new Error(\"WebSocket not connected to Stream Deck\");\n        }\n\n        return new Promise<string>((resolve, reject) => {\n          const timeout = setTimeout(() => {\n            websocketService.off(\"sendToPropertyInspector\", responseHandler);\n            reject(new Error(\"Group delete timeout\"));\n          }, 10000); // 10 second timeout\n\n          const responseHandler = (message: any) => {\n            if (message.payload?.event === \"groupDeleted\") {\n              clearTimeout(timeout);\n              websocketService.off(\"sendToPropertyInspector\", responseHandler);\n\n              if (message.payload.error) {\n                reject(new Error(message.payload.error));\n              } else {\n                resolve(message.payload.groupId);\n              }\n            }\n          };\n\n          // Listen for response\n          websocketService.on(\"sendToPropertyInspector\", responseHandler);\n\n          // Send delete request\n          websocketService.deleteGroup(input.groupId);\n        });\n      },\n    ),\n  },\n}).createMachine({\n  id: \"groupManagement\",\n  initial: \"idle\",\n  context: ({ input }) => ({\n    groups: [],\n    currentGroup: null,\n    availableLights: [],\n    selectedLights: [],\n    error: null,\n    isLoading: false,\n  }),\n\n  states: {\n    idle: {\n      on: {\n        LOAD_GROUPS: {\n          target: \"loading\",\n        },\n      },\n    },\n\n    loading: {\n      entry: [\"startLoading\", \"clearError\"],\n      exit: \"stopLoading\",\n\n      invoke: {\n        src: \"loadGroups\",\n        input: () => ({}),\n        onDone: {\n          target: \"ready\",\n          actions: assign({\n            groups: ({ event }) => event.output,\n          }),\n        },\n        onError: {\n          target: \"error\",\n          actions: assign({\n            error: ({ event }) =>\n              (event.error as Error)?.message || \"Unknown error\",\n          }),\n        },\n      },\n\n      on: {\n        GROUPS_LOADED: {\n          target: \"ready\",\n          actions: \"setGroups\",\n        },\n        OPERATION_FAILED: {\n          target: \"error\",\n          actions: \"setError\",\n        },\n      },\n    },\n\n    ready: {\n      on: {\n        CREATE_GROUP: {\n          target: \"editing\",\n          actions: \"clearCurrentGroup\",\n        },\n        EDIT_GROUP: {\n          target: \"editing\",\n          actions: [\n            \"setCurrentGroup\",\n            assign({\n              selectedLights: ({ event }) =>\n                event.type === \"EDIT_GROUP\" ? event.group.lightIds || [] : [],\n            }),\n          ],\n        },\n        DELETE_GROUP: {\n          target: \"deleting\",\n        },\n        LOAD_GROUPS: {\n          target: \"loading\",\n        },\n      },\n    },\n\n    editing: {\n      on: {\n        SAVE_GROUP: {\n          target: \"saving\",\n        },\n        CANCEL_EDIT: {\n          target: \"ready\",\n          actions: \"clearCurrentGroup\",\n        },\n        SELECT_LIGHT: {\n          actions: \"selectLight\",\n        },\n        DESELECT_LIGHT: {\n          actions: \"deselectLight\",\n        },\n      },\n    },\n\n    saving: {\n      entry: [\"startLoading\", \"clearError\"],\n      exit: \"stopLoading\",\n\n      invoke: {\n        src: \"saveGroup\",\n        input: ({ context, event, self }) => {\n          if (event.type === \"SAVE_GROUP\") {\n            return {\n              name: event.name,\n              selectedLights: event.selectedLights,\n              groupId: context.currentGroup?.id,\n            };\n          }\n          return {\n            name: \"\",\n            selectedLights: [],\n          };\n        },\n        onDone: {\n          target: \"ready\",\n          actions: [\n            assign({\n              groups: ({ context, event }) => {\n                const savedGroup = event.output;\n                const existingIndex = context.groups.findIndex(\n                  (g) => g.id === savedGroup.id,\n                );\n                if (existingIndex >= 0) {\n                  // Update existing group\n                  const newGroups = [...context.groups];\n                  newGroups[existingIndex] = savedGroup;\n                  return newGroups;\n                } else {\n                  // Add new group\n                  return [...context.groups, savedGroup];\n                }\n              },\n            }),\n            \"clearCurrentGroup\",\n          ],\n        },\n        onError: {\n          target: \"error\",\n          actions: assign({\n            error: ({ event }) =>\n              (event.error as Error)?.message || \"Unknown error\",\n          }),\n        },\n      },\n\n      on: {\n        GROUP_SAVED: {\n          target: \"ready\",\n          actions: [\"addOrUpdateGroup\", \"clearCurrentGroup\"],\n        },\n        OPERATION_FAILED: {\n          target: \"error\",\n          actions: \"setError\",\n        },\n      },\n    },\n\n    deleting: {\n      entry: [\"startLoading\", \"clearError\"],\n      exit: \"stopLoading\",\n\n      invoke: {\n        src: \"deleteGroup\",\n        input: ({ event, self }) => {\n          if (event.type === \"DELETE_GROUP\") {\n            return {\n              groupId: event.groupId,\n            };\n          }\n          return {\n            groupId: \"\",\n          };\n        },\n        onDone: {\n          target: \"ready\",\n          actions: assign({\n            groups: ({ context, event }) =>\n              context.groups.filter((g) => g.id !== event.output),\n          }),\n        },\n        onError: {\n          target: \"error\",\n          actions: assign({\n            error: ({ event }) =>\n              (event.error as Error)?.message || \"Unknown error\",\n          }),\n        },\n      },\n\n      on: {\n        GROUP_DELETED: {\n          target: \"ready\",\n          actions: \"removeGroup\",\n        },\n        OPERATION_FAILED: {\n          target: \"error\",\n          actions: \"setError\",\n        },\n      },\n    },\n\n    error: {\n      on: {\n        LOAD_GROUPS: {\n          target: \"loading\",\n          actions: \"clearError\",\n        },\n        CREATE_GROUP: {\n          target: \"editing\",\n          actions: [\"clearError\", \"clearCurrentGroup\"],\n        },\n      },\n    },\n  },\n});\n","import { ref, computed, onMounted, onUnmounted } from \"vue\";\nimport { createActor, type ActorRefFrom } from \"xstate\";\nimport { groupManagementMachine } from \"../machines/groupManagementMachine\";\nimport type { LightGroup, LightItem } from \"@shared/types\";\n\n/**\n * Vue composable for managing light groups state with XState\n */\nexport function useGroupManagement() {\n  // Create the XState actor\n  const actor = ref<ActorRefFrom<typeof groupManagementMachine> | null>(null);\n\n  // Reactive state from the machine\n  const state = ref(\"idle\");\n  const groups = ref<LightGroup[]>([]);\n  const currentGroup = ref<LightGroup | null>(null);\n  const availableLights = ref<LightItem[]>([]);\n  const selectedLights = ref<string[]>([]);\n  const error = ref<string | null>(null);\n  const isLoading = ref(false);\n\n  // Computed states for easier usage in templates\n  const isIdle = computed(() => state.value === \"idle\");\n  const isLoadingGroups = computed(() => state.value === \"loading\");\n  const isReady = computed(() => state.value === \"ready\");\n  const isEditing = computed(() => state.value === \"editing\");\n  const isSaving = computed(() => state.value === \"saving\");\n  const isDeleting = computed(() => state.value === \"deleting\");\n  const hasError = computed(() => state.value === \"error\");\n  const hasGroups = computed(() => groups.value.length > 0);\n  const isCreatingNew = computed(\n    () => isEditing.value && currentGroup.value === null,\n  );\n  const isEditingExisting = computed(\n    () => isEditing.value && currentGroup.value !== null,\n  );\n\n  // Initialize the actor and subscribe to state changes\n  onMounted(() => {\n    actor.value = createActor(groupManagementMachine, { input: {} });\n\n    // Subscribe to state changes\n    actor.value.subscribe((snapshot) => {\n      state.value = snapshot.value as string;\n      groups.value = snapshot.context.groups;\n      currentGroup.value = snapshot.context.currentGroup;\n      availableLights.value = snapshot.context.availableLights;\n      selectedLights.value = snapshot.context.selectedLights;\n      error.value = snapshot.context.error;\n      isLoading.value = snapshot.context.isLoading;\n    });\n\n    actor.value.start();\n  });\n\n  // Clean up on unmount\n  onUnmounted(() => {\n    if (actor.value) {\n      actor.value.stop();\n    }\n  });\n\n  // Actions\n  const loadGroups = () => {\n    if (actor.value) {\n      actor.value.send({ type: \"LOAD_GROUPS\" });\n    }\n  };\n\n  const createGroup = () => {\n    if (actor.value) {\n      actor.value.send({ type: \"CREATE_GROUP\" });\n    }\n  };\n\n  const editGroup = (group: LightGroup) => {\n    if (actor.value) {\n      actor.value.send({ type: \"EDIT_GROUP\", group });\n    }\n  };\n\n  const saveGroup = (name: string, lightIds: string[]) => {\n    if (actor.value) {\n      actor.value.send({ type: \"SAVE_GROUP\", name, selectedLights: lightIds });\n    }\n  };\n\n  const deleteGroup = (groupId: string) => {\n    if (actor.value) {\n      actor.value.send({ type: \"DELETE_GROUP\", groupId });\n    }\n  };\n\n  const cancelEdit = () => {\n    if (actor.value) {\n      actor.value.send({ type: \"CANCEL_EDIT\" });\n    }\n  };\n\n  const selectLight = (lightId: string) => {\n    if (actor.value) {\n      actor.value.send({ type: \"SELECT_LIGHT\", lightId });\n    }\n  };\n\n  const deselectLight = (lightId: string) => {\n    if (actor.value) {\n      actor.value.send({ type: \"DESELECT_LIGHT\", lightId });\n    }\n  };\n\n  const toggleLightSelection = (lightId: string) => {\n    if (selectedLights.value.includes(lightId)) {\n      deselectLight(lightId);\n    } else {\n      selectLight(lightId);\n    }\n  };\n\n  const isLightSelected = (lightId: string) => {\n    return computed(() => selectedLights.value.includes(lightId));\n  };\n\n  return {\n    // State\n    state: computed(() => state.value),\n    groups: computed(() => groups.value),\n    currentGroup: computed(() => currentGroup.value),\n    availableLights: computed(() => availableLights.value),\n    selectedLights: computed(() => selectedLights.value),\n    error: computed(() => error.value),\n    isLoading: computed(() => isLoading.value),\n\n    // Computed convenience states\n    isIdle,\n    isLoadingGroups,\n    isReady,\n    isEditing,\n    isSaving,\n    isDeleting,\n    hasError,\n    hasGroups,\n    isCreatingNew,\n    isEditingExisting,\n\n    // Actions\n    loadGroups,\n    createGroup,\n    editGroup,\n    saveGroup,\n    deleteGroup,\n    cancelEdit,\n    selectLight,\n    deselectLight,\n    toggleLightSelection,\n    isLightSelected,\n  };\n}\n","<template>\n  <div class=\"group-control-view\">\n    <!-- API Configuration Section -->\n    <section class=\"config-section\" data-testid=\"api-key-section\">\n      <h2>API Configuration</h2>\n      <div class=\"form-group\">\n        <label for=\"apiKey\">API Key</label>\n        <div class=\"input-group\">\n          <input\n            id=\"apiKey\"\n            v-model=\"localApiKey\"\n            type=\"password\"\n            class=\"form-input\"\n            placeholder=\"Enter your Govee API key\"\n            autocomplete=\"off\"\n            :disabled=\"apiConnection.isConnecting.value\"\n            @keyup.enter=\"connectToApi\"\n          />\n          <button\n            v-if=\"apiConnection.isDisconnected || apiConnection.hasError\"\n            class=\"btn btn-primary\"\n            :disabled=\"!localApiKey || apiConnection.isConnecting.value\"\n            @click=\"connectToApi\"\n          >\n            <span v-if=\"apiConnection.isConnecting\">Connecting...</span>\n            <span v-else>Connect</span>\n          </button>\n          <button\n            v-else-if=\"apiConnection.isConnected\"\n            class=\"btn btn-secondary\"\n            @click=\"apiConnection.disconnect\"\n          >\n            Disconnect\n          </button>\n        </div>\n\n        <!-- Connection Status -->\n        <div\n          v-if=\"apiConnection.isConnecting\"\n          class=\"status-message status-loading\"\n        >\n          <span class=\"status-icon\">⏳</span>\n          Validating API key...\n        </div>\n        <div\n          v-else-if=\"apiConnection.isConnected\"\n          class=\"status-message status-success\"\n        >\n          <span class=\"status-icon\">✅</span>\n          API key validated successfully\n        </div>\n        <div\n          v-else-if=\"apiConnection.hasError\"\n          class=\"status-message status-error\"\n        >\n          <span class=\"status-icon\">❌</span>\n          {{ apiConnection.error }}\n          <button class=\"btn-link\" @click=\"apiConnection.retry\">Retry</button>\n        </div>\n\n        <small class=\"help-text\">\n          Get your API key from the Govee Home app → Settings → About Us → Apply\n          for API Key\n        </small>\n      </div>\n    </section>\n\n    <!-- Group Management Section -->\n    <section class=\"config-section\" data-testid=\"group-management-section\">\n      <h2>Group Management</h2>\n\n      <!-- Loading Groups -->\n      <div v-if=\"groupManagement.isIdle\" class=\"form-group\">\n        <button\n          class=\"btn btn-primary\"\n          :disabled=\"!apiConnection.isConnected\"\n          @click=\"groupManagement.loadGroups\"\n        >\n          Load Groups\n        </button>\n        <small class=\"help-text\">\n          Connect your API key first, then load your light groups\n        </small>\n      </div>\n\n      <!-- Loading State -->\n      <div\n        v-else-if=\"groupManagement.isLoadingGroups\"\n        class=\"status-message status-loading\"\n      >\n        <span class=\"status-icon\">⏳</span>\n        Loading groups...\n      </div>\n\n      <!-- Error State -->\n      <div\n        v-else-if=\"groupManagement.hasError\"\n        class=\"status-message status-error\"\n      >\n        <span class=\"status-icon\">❌</span>\n        {{ groupManagement.error }}\n        <button class=\"btn-link\" @click=\"groupManagement.loadGroups\">\n          Retry\n        </button>\n      </div>\n\n      <!-- Ready State - Group Selection -->\n      <div v-else-if=\"groupManagement.isReady\" class=\"form-group\">\n        <div class=\"form-group\">\n          <label for=\"groupSelect\">Light Group</label>\n          <select\n            id=\"groupSelect\"\n            v-model=\"selectedGroup\"\n            class=\"form-select\"\n            :disabled=\"!groupManagement.hasGroups\"\n          >\n            <option value=\"\" disabled>\n              {{\n                groupManagement.hasGroups\n                  ? \"Select a light group...\"\n                  : \"No groups found\"\n              }}\n            </option>\n            <option\n              v-for=\"group in groupManagement.groups.value\"\n              :key=\"group.id\"\n              :value=\"group.id\"\n            >\n              {{ group.name }} ({{ group.lightIds?.length || 0 }} lights)\n            </option>\n          </select>\n        </div>\n\n        <div class=\"group-actions\">\n          <button\n            type=\"button\"\n            class=\"btn btn-secondary\"\n            :disabled=\"!selectedGroup || groupManagement.isLoading.value\"\n            @click=\"editGroup\"\n          >\n            ✏️ Edit\n          </button>\n          <button\n            type=\"button\"\n            class=\"btn btn-danger\"\n            :disabled=\"!selectedGroup || groupManagement.isLoading.value\"\n            @click=\"deleteGroup\"\n          >\n            <span v-if=\"groupManagement.isDeleting\">Deleting...</span>\n            <span v-else>🗑️ Delete</span>\n          </button>\n          <button\n            type=\"button\"\n            class=\"btn btn-primary\"\n            :disabled=\"groupManagement.isLoading.value\"\n            @click=\"createNewGroup\"\n          >\n            + Create New Group\n          </button>\n        </div>\n      </div>\n    </section>\n\n    <!-- Group Creation/Edit Form -->\n    <section\n      v-if=\"showCreateForm || showEditForm\"\n      class=\"config-section\"\n      data-testid=\"group-creation-form\"\n    >\n      <h2>{{ showEditForm ? \"Edit Group\" : \"Create New Group\" }}</h2>\n\n      <!-- Saving State -->\n      <div\n        v-if=\"groupManagement.isSaving\"\n        class=\"status-message status-loading\"\n      >\n        <span class=\"status-icon\">⏳</span>\n        {{ showEditForm ? \"Updating group...\" : \"Creating group...\" }}\n      </div>\n\n      <div v-else>\n        <div class=\"form-group\">\n          <label for=\"groupName\">Group Name</label>\n          <input\n            id=\"groupName\"\n            v-model=\"groupName\"\n            type=\"text\"\n            class=\"form-input\"\n            placeholder=\"Enter group name\"\n            :disabled=\"groupManagement.isLoading.value\"\n          />\n        </div>\n\n        <div class=\"form-group\">\n          <label>Select Lights</label>\n\n          <!-- Lights not loaded yet -->\n          <div\n            v-if=\"lightDiscovery.isIdle\"\n            class=\"status-message status-loading\"\n          >\n            <span class=\"status-icon\">⏳</span>\n            Loading available lights...\n          </div>\n\n          <!-- Lights loading -->\n          <div\n            v-else-if=\"lightDiscovery.isFetchingLights\"\n            class=\"status-message status-loading\"\n          >\n            <span class=\"status-icon\">⏳</span>\n            Discovering lights...\n          </div>\n\n          <!-- Light discovery error -->\n          <div\n            v-else-if=\"lightDiscovery.hasError\"\n            class=\"status-message status-error\"\n          >\n            <span class=\"status-icon\">❌</span>\n            {{ lightDiscovery.error }}\n            <button class=\"btn-link\" @click=\"lightDiscovery.retryFetch\">\n              Retry\n            </button>\n          </div>\n\n          <!-- Light selection -->\n          <div\n            v-else-if=\"lightDiscovery.isReady && lightDiscovery.hasLights\"\n            class=\"light-selection\"\n          >\n            <div\n              v-for=\"light in lightDiscovery.lights.value\"\n              :key=\"light.value\"\n              class=\"light-checkbox\"\n            >\n              <input\n                :id=\"`light-${light.value}`\"\n                :checked=\"isLightSelected(light.value)\"\n                type=\"checkbox\"\n                class=\"checkbox\"\n                @change=\"toggleLightSelection(light.value)\"\n              />\n              <label :for=\"`light-${light.value}`\" class=\"checkbox-label\">\n                {{ light.label }}\n              </label>\n            </div>\n          </div>\n\n          <!-- No lights found -->\n          <div v-else class=\"status-message status-error\">\n            <span class=\"status-icon\">ℹ️</span>\n            No lights available. Make sure your API key is connected and lights\n            are discoverable.\n          </div>\n        </div>\n\n        <div class=\"form-actions\">\n          <button\n            type=\"button\"\n            class=\"btn btn-secondary\"\n            :disabled=\"groupManagement.isLoading.value\"\n            @click=\"cancelGroupForm\"\n          >\n            Cancel\n          </button>\n          <button\n            type=\"button\"\n            class=\"btn btn-primary\"\n            :disabled=\"\n              !groupName ||\n              selectedLights.length === 0 ||\n              groupManagement.isLoading.value\n            \"\n            @click=\"saveGroup\"\n          >\n            {{ showEditForm ? \"Update Group\" : \"Create Group\" }}\n          </button>\n        </div>\n      </div>\n    </section>\n\n    <!-- Control Mode Section -->\n    <section class=\"config-section\" data-testid=\"control-mode-section\">\n      <h2>Control Mode</h2>\n      <div class=\"form-group\">\n        <label for=\"controlMode\">Control Mode</label>\n        <select id=\"controlMode\" v-model=\"controlMode\" class=\"form-select\">\n          <option value=\"toggle\">Toggle On/Off</option>\n          <option value=\"on\">Turn On</option>\n          <option value=\"off\">Turn Off</option>\n          <option value=\"brightness\">Set Brightness</option>\n          <option value=\"color\">Set Color</option>\n          <option value=\"colorTemp\">Set Color Temperature</option>\n        </select>\n      </div>\n\n      <!-- Dynamic control inputs (same as LightControlView) -->\n      <div v-if=\"controlMode === 'brightness'\" class=\"form-group\">\n        <label for=\"brightness\">Brightness (%)</label>\n        <input\n          id=\"brightness\"\n          v-model.number=\"brightnessValue\"\n          type=\"range\"\n          min=\"1\"\n          max=\"100\"\n          class=\"form-range\"\n        />\n        <span class=\"range-value\">{{ brightnessValue }}%</span>\n      </div>\n\n      <div v-if=\"controlMode === 'color'\" class=\"form-group\">\n        <label for=\"color\">Color</label>\n        <input\n          id=\"color\"\n          v-model=\"colorValue\"\n          type=\"color\"\n          class=\"form-color\"\n        />\n      </div>\n\n      <div v-if=\"controlMode === 'colorTemp'\" class=\"form-group\">\n        <label for=\"colorTemp\">Color Temperature (K)</label>\n        <input\n          id=\"colorTemp\"\n          v-model.number=\"colorTempValue\"\n          type=\"range\"\n          min=\"2000\"\n          max=\"9000\"\n          step=\"100\"\n          class=\"form-range\"\n        />\n        <span class=\"range-value\">{{ colorTempValue }}K</span>\n      </div>\n    </section>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch, onMounted } from \"vue\";\nimport type { ControlMode, LightGroup } from \"@shared/types\";\nimport { useApiConnection } from \"../composables/useApiConnection\";\nimport { useLightDiscovery } from \"../composables/useLightDiscovery\";\nimport { useGroupManagement } from \"../composables/useGroupManagement\";\nimport { useGroupControlSettings } from \"../composables/useSettings\";\n\n// XState composables\nconst apiConnection = useApiConnection();\nconst lightDiscovery = useLightDiscovery();\nconst groupManagement = useGroupManagement();\n\n// Settings composable with persistence\nconst settingsManager = useGroupControlSettings();\n\n// Group form state\nconst groupName = ref<string>(\"\");\n\n// Computed state helpers\nconst showCreateForm = computed(() => groupManagement.isCreatingNew.value);\nconst showEditForm = computed(() => groupManagement.isEditingExisting.value);\nconst selectedLights = computed(() => groupManagement.selectedLights.value);\n\n// Computed values bound to settings\nconst localApiKey = computed({\n  get: () => settingsManager.settings.apiKey || \"\",\n  set: (value: string) =>\n    settingsManager.updateSetting(\"apiKey\", value || undefined),\n});\n\nconst selectedGroup = computed({\n  get: () => settingsManager.settings.selectedGroupId || \"\",\n  set: (value: string) => {\n    settingsManager.updateSetting(\"selectedGroupId\", value || undefined);\n\n    // Update group name in settings for display\n    if (value) {\n      const group = groupManagement.groups.value.find((g) => g.id === value);\n      if (group) {\n        settingsManager.updateSetting(\"selectedGroupName\", group.name);\n      }\n    } else {\n      settingsManager.updateSetting(\"selectedGroupName\", undefined);\n    }\n  },\n});\n\nconst controlMode = computed({\n  get: () => settingsManager.settings.controlMode || \"toggle\",\n  set: (value: ControlMode) =>\n    settingsManager.updateSetting(\"controlMode\", value),\n});\n\nconst brightnessValue = computed({\n  get: () => settingsManager.settings.brightnessValue || 100,\n  set: (value: number) =>\n    settingsManager.updateSetting(\"brightnessValue\", value),\n});\n\nconst colorValue = computed({\n  get: () => settingsManager.settings.colorValue || \"#ffffff\",\n  set: (value: string) => settingsManager.updateSetting(\"colorValue\", value),\n});\n\nconst colorTempValue = computed({\n  get: () => settingsManager.settings.colorTempValue || 6500,\n  set: (value: number) =>\n    settingsManager.updateSetting(\"colorTempValue\", value),\n});\n\n// Actions\nconst connectToApi = () => {\n  if (localApiKey.value) {\n    apiConnection.connect(localApiKey.value);\n  }\n};\n\nconst editGroup = () => {\n  const group = groupManagement.groups.value.find(\n    (g) => g.id === selectedGroup.value,\n  );\n  if (group) {\n    groupManagement.editGroup(group);\n    groupName.value = group.name;\n  }\n};\n\nconst deleteGroup = () => {\n  if (selectedGroup.value) {\n    const confirmDelete = confirm(\n      \"Are you sure you want to delete this group?\",\n    );\n    if (confirmDelete) {\n      groupManagement.deleteGroup(selectedGroup.value);\n      selectedGroup.value = \"\";\n    }\n  }\n};\n\nconst saveGroup = () => {\n  if (groupName.value && selectedLights.value.length > 0) {\n    groupManagement.saveGroup(groupName.value, selectedLights.value);\n    groupName.value = \"\";\n  }\n};\n\nconst cancelGroupForm = () => {\n  groupManagement.cancelEdit();\n  groupName.value = \"\";\n};\n\nconst createNewGroup = () => {\n  groupManagement.createGroup();\n  groupName.value = \"\";\n};\n\n// Light selection methods for form\nconst toggleLightSelection = (lightId: string) => {\n  groupManagement.toggleLightSelection(lightId);\n};\n\nconst isLightSelected = (lightId: string) => {\n  return groupManagement.isLightSelected(lightId).value;\n};\n\n// Watch for API connection changes to load groups and lights\nwatch(\n  () => apiConnection.isConnected.value,\n  (isConnected) => {\n    if (isConnected) {\n      if (lightDiscovery.isIdle.value) {\n        lightDiscovery.fetchLights();\n      }\n      if (groupManagement.isIdle.value) {\n        groupManagement.loadGroups();\n      }\n    }\n  },\n);\n\n// Watch for API key changes in settings to update connection\nwatch(\n  () => settingsManager.settings.apiKey,\n  (newApiKey) => {\n    if (newApiKey && !apiConnection.isConnected.value) {\n      apiConnection.connect(newApiKey);\n    }\n  },\n);\n\n// Initialize on mount\nonMounted(() => {\n  // Enable auto-save with 500ms delay for responsive UI\n  settingsManager.enableAutoSave(500);\n\n  // Load existing settings\n  settingsManager.loadSettings();\n\n  // If we have an API key in settings, connect automatically\n  if (settingsManager.settings.apiKey) {\n    apiConnection.connect(settingsManager.settings.apiKey);\n  }\n\n  // Load groups if already connected\n  if (apiConnection.isConnected.value) {\n    if (groupManagement.isIdle.value) {\n      groupManagement.loadGroups();\n    }\n  }\n});\n</script>\n\n<style scoped>\n.group-control-view {\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n}\n\n.config-section {\n  padding: 16px;\n  border: 1px solid var(--sdpi-color-border, #333);\n  border-radius: 8px;\n  background-color: var(--sdpi-color-bg-secondary, #2d2d30);\n}\n\n.config-section h2 {\n  margin: 0 0 16px 0;\n  font-size: 16px;\n  font-weight: 600;\n  color: var(--sdpi-color-accent, #0099ff);\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  margin-bottom: 16px;\n}\n\n.form-group:last-child {\n  margin-bottom: 0;\n}\n\n.form-group label {\n  font-size: 14px;\n  font-weight: 500;\n  color: var(--sdpi-color-text, #cccccc);\n}\n\n.form-input,\n.form-select {\n  padding: 8px 12px;\n  border: 1px solid var(--sdpi-color-border, #333);\n  border-radius: 4px;\n  background-color: var(--sdpi-color-bg, #1e1e1e);\n  color: var(--sdpi-color-text, #cccccc);\n  font-size: 14px;\n}\n\n.form-input:focus,\n.form-select:focus {\n  outline: none;\n  border-color: var(--sdpi-color-accent, #0099ff);\n}\n\n.group-actions {\n  display: flex;\n  gap: 8px;\n  margin-top: 16px;\n}\n\n.btn {\n  padding: 8px 16px;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.btn-primary {\n  background-color: var(--sdpi-color-accent, #0099ff);\n  color: white;\n  border-color: var(--sdpi-color-accent, #0099ff);\n}\n\n.btn-primary:hover:not(:disabled) {\n  background-color: #0077cc;\n  border-color: #0077cc;\n}\n\n.btn-secondary {\n  background-color: transparent;\n  color: var(--sdpi-color-text, #cccccc);\n  border-color: var(--sdpi-color-border, #333);\n}\n\n.btn-secondary:hover:not(:disabled) {\n  background-color: var(--sdpi-color-bg, #1e1e1e);\n}\n\n.btn-danger {\n  background-color: #dc3545;\n  color: white;\n  border-color: #dc3545;\n}\n\n.btn-danger:hover:not(:disabled) {\n  background-color: #c82333;\n  border-color: #c82333;\n}\n\n.light-selection {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  max-height: 200px;\n  overflow-y: auto;\n  padding: 8px;\n  border: 1px solid var(--sdpi-color-border, #333);\n  border-radius: 4px;\n  background-color: var(--sdpi-color-bg, #1e1e1e);\n}\n\n.light-checkbox {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.checkbox {\n  width: 16px;\n  height: 16px;\n}\n\n.checkbox-label {\n  font-size: 14px;\n  color: var(--sdpi-color-text, #cccccc);\n  cursor: pointer;\n}\n\n.form-actions {\n  display: flex;\n  gap: 8px;\n  justify-content: flex-end;\n  margin-top: 16px;\n}\n\n.form-range {\n  width: 100%;\n  margin: 8px 0;\n}\n\n.form-color {\n  width: 60px;\n  height: 40px;\n  border: 1px solid var(--sdpi-color-border, #333);\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.range-value {\n  font-size: 12px;\n  color: var(--sdpi-color-text-secondary, #999);\n  align-self: flex-end;\n}\n\n.help-text {\n  font-size: 12px;\n  color: var(--sdpi-color-text-secondary, #999);\n  line-height: 1.4;\n}\n\n/* Button Styles */\n.btn {\n  padding: 8px 16px;\n  border: none;\n  border-radius: 4px;\n  font-size: 14px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.btn:disabled {\n  opacity: 0.6;\n  cursor: not-allowed;\n}\n\n.btn-primary {\n  background-color: var(--sdpi-color-accent, #0099ff);\n  color: white;\n}\n\n.btn-primary:hover:not(:disabled) {\n  background-color: var(--sdpi-color-accent-hover, #0077cc);\n}\n\n.btn-secondary {\n  background-color: var(--sdpi-color-bg-tertiary, #404040);\n  color: var(--sdpi-color-text, #cccccc);\n  border: 1px solid var(--sdpi-color-border, #333);\n}\n\n.btn-secondary:hover:not(:disabled) {\n  background-color: var(--sdpi-color-bg-hover, #505050);\n}\n\n.btn-link {\n  background: none;\n  border: none;\n  color: var(--sdpi-color-accent, #0099ff);\n  cursor: pointer;\n  font-size: 12px;\n  text-decoration: underline;\n  padding: 0;\n  margin-left: 8px;\n}\n\n.btn-link:hover {\n  color: var(--sdpi-color-accent-hover, #0077cc);\n}\n\n/* Input Group */\n.input-group {\n  display: flex;\n  gap: 8px;\n  align-items: center;\n}\n\n.input-group .form-input {\n  flex: 1;\n}\n\n/* Status Messages */\n.status-message {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 12px;\n  border-radius: 4px;\n  font-size: 14px;\n  margin: 8px 0;\n}\n\n.status-loading {\n  background-color: var(--sdpi-color-bg-info, #1a3b5c);\n  color: var(--sdpi-color-text-info, #79c7ff);\n  border: 1px solid var(--sdpi-color-border-info, #0099ff);\n}\n\n.status-success {\n  background-color: var(--sdpi-color-bg-success, #1a3b1a);\n  color: var(--sdpi-color-text-success, #7dd87d);\n  border: 1px solid var(--sdpi-color-border-success, #28a745);\n}\n\n.status-error {\n  background-color: var(--sdpi-color-bg-error, #3b1a1a);\n  color: var(--sdpi-color-text-error, #ff7979);\n  border: 1px solid var(--sdpi-color-border-error, #dc3545);\n}\n\n.status-icon {\n  font-size: 16px;\n  flex-shrink: 0;\n}\n</style>\n","import { createApp } from \"vue\";\nimport App from \"./App.vue\";\nimport GroupControlView from \"./views/GroupControlView.vue\";\nimport { initializePropertyInspector } from \"./utils/propertyInspectorInit\";\n\n// Initialize Property Inspector WebSocket connection\ninitializePropertyInspector();\n\n// Create and mount the Vue application for Group Control Property Inspector\nconst app = createApp(App);\n\n// Add the group control view as the main content\napp.component(\"main-view\", GroupControlView);\n\n// Mount the app with the specific view\napp.mount(\"#app\");\n"],"names":["groupManagementMachine","setup","assign","event","context","id","existingIndex","g","newGroups","fromPromise","input","websocketService","resolve","reject","timeout","responseHandler","message","self","savedGroup","useGroupManagement","actor","ref","state","groups","currentGroup","availableLights","selectedLights","error","isLoading","isIdle","computed","isLoadingGroups","isReady","isEditing","isSaving","isDeleting","hasError","hasGroups","isCreatingNew","isEditingExisting","onMounted","createActor","snapshot","onUnmounted","loadGroups","createGroup","editGroup","group","saveGroup","name","lightIds","deleteGroup","groupId","cancelEdit","selectLight","lightId","deselectLight","toggleLightSelection","isLightSelected","apiConnection","useApiConnection","lightDiscovery","useLightDiscovery","groupManagement","settingsManager","useGroupControlSettings","groupName","showCreateForm","showEditForm","localApiKey","value","selectedGroup","controlMode","brightnessValue","colorValue","colorTempValue","connectToApi","cancelGroupForm","createNewGroup","watch","isConnected","newApiKey","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_cache","_hoisted_3","_hoisted_4","$event","_unref","args","_hoisted_9","_hoisted_10","_hoisted_11","_createTextVNode","_toDisplayString","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_20","_Fragment","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","light","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","initializePropertyInspector","app","createApp","App","GroupControlView"],"mappings":"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"}