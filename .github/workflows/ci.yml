name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test & Build
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [20, 22]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Clean dependencies (Unix)
      if: runner.os != 'Windows'
      run: rm -rf node_modules package-lock.json
      
    - name: Clean dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        if (Test-Path node_modules) { Remove-Item -Recurse -Force node_modules }
        if (Test-Path package-lock.json) { Remove-Item -Force package-lock.json }
      shell: powershell
      
    - name: Install dependencies
      run: npm install --legacy-peer-deps
    
    - name: Run type checking
      run: npm run type-check
    
    - name: Run linting
      run: npm run lint
    
    - name: Check formatting
      run: npm run format:check
    
    - name: Run tests
      run: npm test
    
    - name: Run build
      run: npm run build
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.node-version == '20'
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        fail_ci_if_error: false

  e2e:
    name: E2E Tests
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Clean dependencies (Unix)
      if: runner.os != 'Windows'
      run: rm -rf node_modules package-lock.json
      
    - name: Clean dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        if (Test-Path node_modules) { Remove-Item -Recurse -Force node_modules }
        if (Test-Path package-lock.json) { Remove-Item -Force package-lock.json }
      shell: powershell
      
    - name: Install dependencies
      run: npm install --legacy-peer-deps
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    
    - name: Build plugin
      run: npm run build
    
    - name: Run E2E tests
      run: npm run test:e2e
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.os }}
        path: playwright-report/
        retention-days: 30

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Clean dependencies (Unix)
      if: runner.os != 'Windows'
      run: rm -rf node_modules package-lock.json
      
    - name: Clean dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        if (Test-Path node_modules) { Remove-Item -Recurse -Force node_modules }
        if (Test-Path package-lock.json) { Remove-Item -Force package-lock.json }
      shell: powershell
      
    - name: Install dependencies
      run: npm install --legacy-peer-deps
    
    - name: Run security audit
      run: npm audit --audit-level high
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        config-file: ./.github/codeql-config.yml
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"
        upload: true
      continue-on-error: true

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Clean dependencies (Unix)
      if: runner.os != 'Windows'
      run: rm -rf node_modules package-lock.json
      
    - name: Clean dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        if (Test-Path node_modules) { Remove-Item -Recurse -Force node_modules }
        if (Test-Path package-lock.json) { Remove-Item -Force package-lock.json }
      shell: powershell
      
    - name: Install dependencies
      run: npm install --legacy-peer-deps
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true